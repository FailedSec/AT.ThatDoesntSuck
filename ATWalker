# [Pseudo]
# while (ConnectionIsDown < 1) {
#   if (ConnectionIsDown > 0) { 
#    if (LastConTime > 2 {
#      .. do stuff ..
#  }
# }

function CheckInetStatus() {
# ---------------------------------------------------------------------- #
# Check for internet connection, then check if VPN is active
# ---------------------------------------------------------------------- #
# [Checking Internet Connectivity First]
# [If we don't want to dump to a log on a network drive, we can dump to a log on a onedrive]
    if ((test-connection 8.8.8.8 -Count 3)) {
        write-host "Internet is up!"
    }
}

function CheckVPNStatus() {
    # [Now check if VPN is active / connected]
    # [If we so choose, we can append to a log on a users dedicated network drive or network location once vpn is connected]
    $vpnCheck = Get-WmiObject -Query "Select Name,NetEnabled from Win32_NetworkAdapter where (Name like '%AnyConnect%' or Name like '%Juniper%' or Name like '%VPN%') and NetEnabled='True'"

# Set this value to Boolean if it returns a value it's true, if it does not return a value it's false.
$vpnCheck = [bool]$vpnCheck

# Check if $vpnCheck is true or false.
if ($vpnCheck) {
    return $vpnCheck
    exit(0)
}
else {
    return $vpnCheck
    exit(1)
}

# ---------------------------------------------------------------------- #
# Function for detecting change in internet connection.
# Execute function after script initialization
# ---------------------------------------------------------------------- #
# $LastConTime = '' # Counter in minutes
# $LastConLat = '' # Last Connection Latitude
# #LastConLong = '' # Last Connection Longitude
# $ConnectionIsDown = ''
# $ConnectionIsUp = ''
# ---------------------------------------------------------------------- #


# ---------------------------------------------------------------------- #
# Function for executing script upon establishing a internet connection.
# ---------------------------------------------------------------------- #
# TODO: stuff here..
# TODO: stuff here...
# ---------------------------------------------------------------------- #


# -------------------- #
# Define GeoHQ Radius
# -------------------- #
$LatA = 'xxx' # Start at HQPoint1 - Front of Fence
$LongA = 'yyy' 
# -------------------- #
$LatB = 'xxx' # - Left Of Fence
$LongB = 'yyy'
# -------------------- #
$LatB = 'xxx' # - Back Of Fence
$LongB = 'yyy'
# -------------------- #
$LatD = 'xxx' # - Right side fence
$LongD = 'yyy'
# ----------------------- #
# Get inner fence radius
# ----------------------- #
# TODO: Calculation function for inner radius of fence points.

# ---------------------------------------------------------------------- #
# Define Radius Fence Trigger
# (Trigger when 'x' amount of distance from lat/long border A,B,C,D)
# ---------------------------------------------------------------------- #
$TriggerA = 'xxx,yyy/xxx,yyy' # Front trigger
$TriggerB = 'xxx,yyy/xxx,yyy' # Left trigger
$TriggerC = 'xxx,yyy/xxx,yyy' # Back trigger
$TriggerD = 'xxx,yyy/xxx,yyy' # Right trigger
